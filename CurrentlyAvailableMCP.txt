Available MCP tools
Claude can use tools provided by specialized servers using Model Context Protocol. Learn more about MCP.

add_observations
Add new observations to existing entities in the knowledge graph

From server: memory

append_insight
Add a business insight to the memo

From server: mcp-server-sqlite

brave_local_search
Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including: - Business names and addresses - Ratings and review counts - Phone numbers and opening hours Use this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.

From server: brave-search

brave_web_search
Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination.

From server: brave-search

browser_click
Click an element on the page using CSS selector

From server: playwright

browser_click_text
Click an element on the page by its text content

From server: playwright

browser_evaluate
Execute JavaScript in the browser console

From server: playwright

browser_fill
Fill out an input field

From server: playwright

browser_hover
Hover an element on the page using CSS selector

From server: playwright

browser_hover_text
Hover an element on the page by its text content

From server: playwright

browser_navigate
Navigate to a URL

From server: playwright

browser_screenshot
Take a screenshot of the current page or a specific element

From server: playwright

browser_select
Select an element on the page with Select tag using CSS selector

From server: playwright

browser_select_text
Select an element on the page with Select tag by its text content

From server: playwright

convert-contents
Converts content between different formats. Transforms input content from any supported format into the specified output format. üö® CRITICAL REQUIREMENTS - PLEASE READ: 1. PDF Conversion: * You MUST install TeX Live BEFORE attempting PDF conversion: * Ubuntu/Debian: `sudo apt-get install texlive-xetex` * macOS: `brew install texlive` * Windows: Install MiKTeX or TeX Live from https://miktex.org/ or https://tug.org/texlive/ * PDF conversion will FAIL without this installation 2. File Paths - EXPLICIT REQUIREMENTS: * When asked to save or convert to a file, you MUST provide: - Complete directory path - Filename - File extension * Example request: 'Write a story and save as PDF' * You MUST specify: '/path/to/story.pdf' or 'C:\Documents\story.pdf' * The tool will NOT automatically generate filenames or extensions 3. File Location After Conversion: * After successful conversion, the tool will display the exact path where the file is saved * Look for message: 'Content successfully converted and saved to: [file_path]' * You can find your converted file at the specified location * If no path is specified, files may be saved in system temp directory (/tmp/ on Unix systems) * For better control, always provide explicit output file paths Supported formats: - Basic formats: txt, html, markdown - Advanced formats (REQUIRE complete file paths): pdf, docx, rst, latex, epub ‚úÖ CORRECT Usage Examples: 1. 'Convert this text to HTML' (basic conversion) - Tool will show converted content 2. 'Save this text as PDF at /documents/story.pdf' - Correct: specifies path + filename + extension - Tool will show: 'Content successfully converted and saved to: /documents/story.pdf' ‚ùå INCORRECT Usage Examples: 1. 'Save this as PDF in /documents/' - Missing filename and extension 2. 'Convert to PDF' - Missing complete file path When requesting conversion, ALWAYS specify: 1. The content or input file 2. The desired output format 3. For advanced formats: complete output path + filename + extension Example: 'Convert this markdown to PDF and save as /path/to/output.pdf' Note: After conversion, always check the success message for the exact file location.

From server: mcp-pandoc

create_directory
Create a new directory or ensure a directory exists. Can create multiple nested directories in one operation. If the directory already exists, this operation will succeed silently. Perfect for setting up directory structures for projects or ensuring required paths exist. Only works within allowed directories.

From server: mcp-server-filesystem

create_entities
Create multiple new entities in the knowledge graph

From server: memory

create_relations
Create multiple new relations between entities in the knowledge graph. Relations should be in active voice

From server: memory

create_table
Create a new table in the SQLite database

From server: mcp-server-sqlite

delete_entities
Delete multiple entities and their associated relations from the knowledge graph

From server: memory

delete_observations
Delete specific observations from entities in the knowledge graph

From server: memory

delete_relations
Delete multiple relations from the knowledge graph

From server: memory

describe_table
Get the schema information for a specific table

From server: mcp-server-sqlite

directory_tree
Get a recursive tree view of files and directories as a JSON structure. Each entry includes 'name', 'type' (file/directory), and 'children' for directories. Files have no children array, while directories always have a children array (which may be empty). The output is formatted with 2-space indentation for readability. Only works within allowed directories.

From server: mcp-server-filesystem

edit_file
Make line-based edits to a text file. Each edit replaces exact line sequences with new content. Returns a git-style diff showing the changes made. Only works within allowed directories.

From server: mcp-server-filesystem

fetch
Fetches a URL from the internet and optionally extracts its contents as markdown. Although originally you did not have internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date information and let the user know that.

From server: mcp-server-fetch

get_file_info
Retrieve detailed metadata about a file or directory. Returns comprehensive information including size, creation time, last modified time, permissions, and type. This tool is perfect for understanding file characteristics without reading the actual content. Only works within allowed directories.

From server: mcp-server-filesystem

get_subtitles
Retrieve subtitles from a video

From server: video-downloader

install_local_mcp_server
Install an MCP server whose code is cloned locally on your computer

From server: mcp-installer

install_repo_mcp_server
Install an MCP server via npx or uvx

From server: mcp-installer

list_allowed_directories
Returns the list of directories that this server is allowed to access. Use this to understand which directories are available before trying to access files.

From server: mcp-server-filesystem

list_directory
Get a detailed listing of all files and directories in a specified path. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is essential for understanding directory structure and finding specific files within a directory. Only works within allowed directories.

From server: mcp-server-filesystem

list_tables
List all tables in the SQLite database

From server: mcp-server-sqlite

move_file
Move or rename files and directories. Can move files between directories and rename them in a single operation. If the destination exists, the operation will fail. Works across different directories and can be used for simple renaming within the same directory. Both source and destination must be within allowed directories.

From server: mcp-server-filesystem

open_nodes
Open specific nodes in the knowledge graph by their names

From server: memory

perplexity_ask
Engages in a conversation using the Sonar API. Accepts an array of messages (each with a role and content) and returns a ask completion response from the Perplexity model.

From server: mcp-server-perplexity-ask

read_file
Read the complete contents of a file from the file system. Handles various text encodings and provides detailed error messages if the file cannot be read. Use this tool when you need to examine the contents of a single file. Only works within allowed directories.

From server: mcp-server-filesystem

read_graph
Read the entire knowledge graph

From server: memory

read_multiple_files
Read the contents of multiple files simultaneously. This is more efficient than reading files one by one when you need to analyze or compare multiple files. Each file's content is returned with its path as a reference. Failed reads for individual files won't stop the entire operation. Only works within allowed directories.

From server: mcp-server-filesystem

read_query
Execute a SELECT query on the SQLite database

From server: mcp-server-sqlite

read_terminal_output
Reads the output from the active iTerm terminal

From server: iterm-mcp

save_response
Save Claude's current response to a file for backup

From server: claude-saver

search_files
Recursively search for files and directories matching a pattern. Searches through all subdirectories from the starting path. The search is case-insensitive and matches partial names. Returns full paths to all matching items. Great for finding files when you don't know their exact location. Only searches within allowed directories.

From server: mcp-server-filesystem

search_nodes
Search for nodes in the knowledge graph based on a query

From server: memory

search_videos
Search for videos on YouTube with detailed metadata

From server: video-downloader

send_control_character
Sends a control character to the active iTerm terminal (e.g., Control-C, or special sequences like ']' for telnet escape)

From server: iterm-mcp

sequentialthinking
A detailed tool for dynamic and reflective problem-solving through thoughts. This tool helps analyze problems through a flexible thinking process that can adapt and evolve. Each thought can build on, question, or revise previous insights as understanding deepens. When to use this tool: - Breaking down complex problems into steps - Planning and design with room for revision - Analysis that might need course correction - Problems where the full scope might not be clear initially - Problems that require a multi-step solution - Tasks that need to maintain context over multiple steps - Situations where irrelevant information needs to be filtered out Key features: - You can adjust total_thoughts up or down as you progress - You can question or revise previous thoughts - You can add more thoughts even after reaching what seemed like the end - You can express uncertainty and explore alternative approaches - Not every thought needs to build linearly - you can branch or backtrack - Generates a solution hypothesis - Verifies the hypothesis based on the Chain of Thought steps - Repeats the process until satisfied - Provides a correct answer Parameters explained: - thought: Your current thinking step, which can include: * Regular analytical steps * Revisions of previous thoughts * Questions about previous decisions * Realizations about needing more analysis * Changes in approach * Hypothesis generation * Hypothesis verification - next_thought_needed: True if you need more thinking, even if at what seemed like the end - thought_number: Current number in sequence (can go beyond initial total if needed) - total_thoughts: Current estimate of thoughts needed (can be adjusted up/down) - is_revision: A boolean indicating if this thought revises previous thinking - revises_thought: If is_revision is true, which thought number is being reconsidered - branch_from_thought: If branching, which thought number is the branching point - branch_id: Identifier for the current branch (if any) - needs_more_thoughts: If reaching end but realizing more thoughts needed You should: 1. Start with an initial estimate of needed thoughts, but be ready to adjust 2. Feel free to question or revise previous thoughts 3. Don't hesitate to add more thoughts if needed, even at the "end" 4. Express uncertainty when present 5. Mark thoughts that revise previous thinking or branch into new paths 6. Ignore information that is irrelevant to the current step 7. Generate a solution hypothesis when appropriate 8. Verify the hypothesis based on the Chain of Thought steps 9. Repeat the process until satisfied with the solution 10. Provide a single, ideally correct answer as the final output 11. Only set next_thought_needed to false when truly done and a satisfactory answer is reached

From server: sequential-thinking

think
Use the tool to think about something. It will not obtain new information or change the database, but just append the thought to the log. Use it when complex reasoning or some cache memory is needed.

From server: think

video_info
Get information about a video without downloading

From server: video-downloader

write_file
Create a new file or completely overwrite an existing file with new content. Use with caution as it will overwrite existing files without warning. Handles text content with proper encoding. Only works within allowed directories.

From server: mcp-server-filesystem

write_query
Execute an INSERT, UPDATE, or DELETE query on the SQLite database

From server: mcp-server-sqlite

write_to_terminal
Writes text to the active iTerm terminal - often used to run a command in the terminal

From server: iterm-mcp
