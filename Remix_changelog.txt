CHANGELOG.md
This page lists all releases/release notes for Remix back to v2.0.0. For releases prior to v2, please refer to the Github Releases Page.

We manage release notes in this file instead of the paginated Github Releases Page for 2 reasons:

Pagination in the Github UI means that you cannot easily search release notes for a large span of releases at once
The paginated Github interface also cuts off longer releases notes without indication in list view, and you need to click into the detail view to see the full set of release notes
Date: 2024-12-20

@remix-run/dev - Allow suppression of future flag warnings by setting them to false (#10358)
@remix-run/react - Throw unwrapped Single Fetch redirect to align with pre-Single Fetch behavior (#10317)
Full Changelog: v2.15.1...v2.15.2

Date: 2024-12-09

create-remix - Move fs-extra from devDependencies to dependencies (#10300)
Full Changelog: v2.15.0...v2.15.1

Date: 2024-11-19

Stabilize the future.v3_routeConfig future flag, replacing future.unstable_routeConfig. This enables support for routes.ts to assist with the migration to React Router v7. (#10236)

Note that if you had already enabled the future.unstable_routeConfig flag, your route config in app/routes.ts is no longer defined via the routes export and must now be defined via the default export.

import { type RouteConfig } from "@remix-run/route-config";

-export const routes: RouteConfig = [];
+export default [] satisfies RouteConfig;
 
Date: 2024-11-08

Deprecate SerializeFrom in favor of generics because it will be removed in React Router v7 (#10173)

Add deprecation warning to @remix-run/eslint-config (#10174)

Add support for routes.ts behind future.unstable_routeConfig flag to assist with the migration to React Router v7. (#10107)

Config-based routing is the new default in React Router v7, configured via the routes.ts file in the app directory. Support for routes.ts and its related APIs in Remix are designed as a migration path to help minimize the number of changes required when moving your Remix project over to React Router v7. While some new packages have been introduced within the @remix-run scope, these new packages only exist to keep the code in routes.ts as similar as possible to the equivalent code for React Router v7.

When the unstable_routeConfig future flag is enabled, Remix's built-in file system routing will be disabled and your project will opted into React Router v7's config-based routing.

To enable the flag, in your vite.config.ts file:

remix({
  future: {
    unstable_routeConfig: true,
  },
});
 
A minimal routes.ts file to support Remix's built-in file system routing looks like this:

// app/routes.ts
import { flatRoutes } from "@remix-run/fs-routes";
import type { RouteConfig } from "@remix-run/route-config";

export const routes: RouteConfig = flatRoutes();
 
Log deprecation warnings for v3 future flags (#10126)

Add @deprecated annotations to json/defer utilities
@remix-run/react - Fix defaultShouldRevalidate value when using Single Fetch (#10139)
@remix-run/server-runtime - Update externally-accessed resource routes warning to cover null usage as well (#10145)
Full Changelog: v2.13.1...v2.14.0

Date: 2024-10-11

@remix-run/dev - Revert future.v3_optimizeDeps back to future.unstable_optimizeDeps as it was not intended to stabilize in Remix v2 (#10099)
Full Changelog: v2.13.0...v2.13.1

Date: 2024-10-11

This release stabilizes a handful of "unstable" APIs in preparation for the pending React Router v7 release (see these posts for more info):

unstable_data → data (for use with Single Fetch)
unstable_flushSync → flushSync (useSubmit, fetcher.load, fetcher.submit)
unstable_viewTransition → viewTransition (<Link>, <Form>, useNavigate, useSubmit)
future.unstable_optimizeDeps → future.v3_optimizeDeps (Docs)
⚠️ This flag was not intended to stabilize in Remix v2 and was reverted back to future.unstable_optimizeDeps in 2.13.1
future.unstable_lazyRouteDiscovery → future.v3_lazyRouteDiscovery (Docs)
future.unstable_singleFetch → future.v3_singleFetch (Docs)
Stabilize React Router APIs in Remix (#9980)
Adopt stabilized React Router APIs internally
Single Fetch: unstable_dataStrategy -> dataStrategy
Lazy Route Discovery: unstable_patchRoutesOnNavigation -> patchRoutesOnNavigation
Stabilize public-facing APIs
Single Fetch: unstable_data() -> data()
unstable_viewTransition -> viewTransition (Link, Form, navigate, submit)
unstable_flushSync> -> <Link viewTransition> (Link, Form, navigate, submit, useFetcher)
Stabilize future flags (#10072, #10092)
future.unstable_lazyRouteDiscovery -> future.v3_lazyRouteDiscovery
future.unstable_optimizeDeps -> future.v3_optimizeDeps
future.unstable_singleFetch -> future.v3_singleFetch
@remix-run/dev - Stop passing request.signal as the renderToReadableStream signal to abort server rendering for cloudflare/deno runtimes because by the time that request is aborted, aborting the rendering is useless because there's no way for React to flush down the unresolved boundaries (#10047)
This has been incorrect for some time, but only recently exposed due to a bug in how we were aborting requests when running via remix vite:dev because we were incorrectly aborting requests after successful renders - which was causing us to abort a completed React render, and try to close an already closed ReadableStream
This has likely not shown up in any production scenarios because cloudflare/deno production runtimes are (correctly) not aborting the request.signal on successful renders
The built-in entry.server files no longer pass a signal to renderToReadableStream because adding a timeout-based abort signal to the default behavior would constitute a breaking change
Users can configure this abort behavior via their own entry.server via remix reveal entry.server, and the template entry.server files have been updated with an example approach for newly created Remix apps
@remix-run/express - Fix adapter logic for aborting request.signal so we don't incorrectly abort on the close event for successful requests (#10046)
@remix-run/react - Fix bug with clientLoader.hydrate in a layout route when hydrating with bubbled errors (#10063)
Full Changelog: v2.12.1...v2.13.0

Date: 2024-09-19

@remix-run/dev - Properly abort request.signal during vite dev when the node response is closed (#9976)
@remix-run/dev - CSS imports with ?inline, ?inline-css and ?raw are no longer incorrectly injected during SSR in development (#9910)
@remix-run/server-runtime: Single Fetch: Fix types when loader, action, clientLoader, or clientAction return a mixture of bare objects, json(...), defer(...), and unstable_data(...). (#9999)
@remix-run/node/@remix-run/cloudflare/@remix-run/deno - Single Fetch: Re-export interface Future through runtime packages so that pnpm doesn't complain about @remix-run/server-runtime not being a dependency (#9982)
If you've already opted into Single Fetch, you can change your Single Fetch type augmentation in vite.config.ts to augment @remix-run/node (or cloudflare/deno) instead of @remix-run/server-runtime
Full Changelog: v2.12.0...v2.12.1

Date: 2024-09-09

You can now opt-in to automatic dependency optimization during development by using the future.unstable_optimizeDeps future flag. For details, check out the docs at Guides > Dependency optimization. For users who were previously working around this limitation, you no longer need to explicitly add routes to Vite's optimizeDeps.entries nor do you need to disable the remix-dot-server plugin.

If you were already using single-fetch types:
Remove the "@remix-run/react/future/single-fetch.d.ts" override from tsconfig.json > compilerOptions > types
Remove defineLoader, defineAction, defineClientLoader, defineClientAction helpers from your route modules
Replace UIMatch_SingleFetch type helper with the original UIMatch
Replace MetaArgs_SingleFetch type helper with the original MetaArgs
Then you are ready for the new type safety setup:

// vite.config.ts

declare module "@remix-run/server-runtime" {
  interface Future {
    unstable_singleFetch: true; // 👈 enable _types_ for single-fetch
  }
}

export default defineConfig({
  plugins: [
    remix({
      future: {
        unstable_singleFetch: true, // 👈 enable single-fetch
      },
    }),
  ],
});
 
For more information, see Guides > Single Fetch in our docs.

With Single Fetch, re-used routes will now revalidate by default on GET navigations. This is aimed at improving caching of Single Fetch calls in the simple case while still allowing users to opt-into the previous behavior for more advanced use cases.

With this new behavior, requests do not need special query params for granular route revalidations out of the box - i.e., GET /a/b/c.data

There are two conditions that will trigger granular revalidation and will exclude certain routes from the single fetch call:

If a route opts out of revalidation via shouldRevalidate
If a route defines a clientLoader
If you call serverLoader() from your clientLoader, that will make a separate HTTP call for just that route loader - i.e., GET /a/b/c.data?_routes=routes/a for a clientLoader in routes/a.tsx
When one or more routes are excluded from the Single Fetch call, the remaining routes that have loaders are included as query params. For example, when navigating to /a/b/c, if A was excluded, and the root route and routes/b had a loader but routes/c did not, the Single Fetch request would be GET /a/b/c.data?_routes=root,routes/b.

For more information, see Guides > Single Fetch in our docs.

@remix-run/dev - New future.unstable_optimizeDeps flag for automatic dependency optimization (#9921)
@remix-run/dev - Handle circular dependencies in modulepreload manifest generation (#9917)
@remix-run/dev - Fix dest already exists build errors by only moving SSR assets to the client build directory when they're not already present on disk (#9901)
@remix-run/react - Clarify wording in default HydrateFallback console warning (#9899)
@remix-run/react - Remove hydration URL check that was originally added for React 17 hydration issues and we no longer support React 17 (#9890)
Reverts the logic originally added in Remix v1.18.0 via #6409
This was added to resolve an issue that could arise when doing quick back/forward history navigations while JS was loading which would cause a mismatch between the server matches and client matches: #1757
This specific hydration issue would then cause this React v17 only looping issue: #1678
The URL comparison that we added in 1.18.0 turned out to be subject to false positives of it's own which could also put the user in looping scenarios
Remix v2 upgraded it's minimal React version to v18 which eliminated the v17 hydration error loop
React v18 handles this hydration error like any other error and does not result in a loop
So we can remove our check and thus avoid the false-positive scenarios in which it may also trigger a loop
@remix-run/react - Lazy Route Discovery: Sort /__manifest query parameters for better caching (#9888)
@remix-run/react - Single Fetch: Improved type safety (#9893)
@remix-run/react - Single Fetch: Fix revalidation behavior bugs (#9938)
@remix-run/server-runtime - Do not render or try to include a body for 304 responses on document requests (#9955)
@remix-run/server-runtime - Single Fetch: Do not try to encode a turbo-stream body into 304 responses (#9941)
@remix-run/server-runtime - Single Fetch: Change content type on .data requests to text/x-script to allow Cloudflare compression (#9889)
Full Changelog: v2.11.2...v2.12.0

Date: 2024-08-15

@remix-run/react - Fog of War: Simplify implementation now that React Router handles slug/splat edge cases and tracks previously discovered routes (see remix-run/react-router#11883) (#9860)
⚠️ This changes the return signature of the internal /__manifest endpoint since we no longer need the notFoundPaths field
@remix-run/react - Fog of War: Update to use renamed unstable_patchRoutesOnNavigation function in RR (see remix-run/react-router#11888) (#9860)
@remix-run/server-runtime - Single Fetch: Fix redirects when a basename is present (#9848)
@remix-run/server-runtime - Single Fetch: Update turbo-stream to v2.3.0 (#9856)
Stabilize object key order for serialized payloads
Remove memory limitations payloads sizes
Full Changelog: v2.11.1...v2.11.2

Date: 2024-08-05

@remix-run/react - Revert #9695, stop infinite reload (a7cffe57)
@remix-run/react
Full Changelog: v2.11.0...v2.11.1

Date: 2024-08-01

We found that the future.unstable_fogOfWar flag name could be a bit confusing without the proper context (notably, the blog post), so we've renamed the flag to future.unstable_lazyRouteDiscovery for clarity. If you had opted into this feature already, please update the name of the flag in your vite.config.ts file (or remix.config.js).

The original Single Fetch approach was based on an assumption that an eventual middleware implementation would require something like the ResponseStub API so users could mutate status/headers in middleware before/after handlers as well as during handlers. As part of Single Fetch, we wanted to align how response headers would be merged between document and data requests. Thinking response was the future API, we aligned document requests to use the response stub that data requests were using, and we stopped using the headers() function.

However, the realization/alignment between Michael and Ryan on the recent roadmap planning made us realize that the original assumption was incorrect. middleware won't need a response stub - as users can just mutate the Response they get from await next() directly.

Removing that assumption, and still wanting to align how headers get merged between document and data requests, it makes more sense to stick with the current headers() API and align Single Fetch data requests to use that existing API. This was we don't need to introduce any new header-related APIs which will make the adoption of Single Fetch much easier.

With this change:

The headers() function will let you control header merging for both document and data requests
In most cases, if you were returning json()/defer() without setting a custom status or headers, you can just remove those utility functions and return the raw data
❌ return json({ data: "whatever" });
✅ return { data: "whatever" };
If you were returning a custom status or headers via json/defer:
We've added a new API-compatible unstable_data utility that will let you send back status/headers alongside your raw data without having to encode it into a Response
We will be removing both json and defer in the next major version, but both should still work in Single Fetch in v2 to allow for incremental adoption of the new behavior
⚠️ If you've already adopted Single Fetch in it's unstable state and converted to response stub, you'll need to move those changes back to leveraging the headers() API.

@remix-run/dev - Fog of War: Rename future.unstable_fogOfWar to future.unstable_lazyRouteDiscovery for clarity (#9763)
@remix-run/server-runtime - Add a new replace(url, init?) alternative to redirect(url, init?) that performs a history.replaceState instead of a history.pushState on client-side navigation redirects (#9764)
@remix-run/server-runtime - Single Fetch: Add a new unstable_data() API as a replacement for json/defer when custom status/headers are needed (#9769)
@remix-run/server-runtime - Single Fetch: Remove responseStub in favor of headers (#9769)
@remix-run/dev - Handle absolute Vite base URLs (#9700)
@remix-run/react - Change initial hydration route mismatch from a URL check to a matches check to be resistant to URL inconsistencies (#9695)
@remix-run/react - Single Fetch: Ensure calls don't include any trailing slash from the pathname (i.e., /path/.data) (#9792)
@remix-run/react - Single Fetch: Add undefined to the useRouteLoaderData type override (#9796)
Full Changelog: v2.10.3...v2.11.0

Date: 2024-07-16

@remix-run/architect - Manually joining headers with semi-colons to avoid differences in Remix and node/undici Headers implementation (#9664)
@remix-run/react - Log any errors encountered loading a route module prior to reloading the page (#8932)
@remix-run/react - Single Fetch (unstable): Proxy request.signal through dataStrategy for loader calls to fix cancellation (#9738)
@remix-run/react - Single Fetch (unstable): Adopt React Router's stabilized future.v7_skipActionErrorRevalidation under the hood (#9706)
This stabilizes the shouldRevalidate parameter from unstable_actionStatus to actionStatus
⚠️ This might be a breaking change for your app if you have opted into single fetch and the unstable_actionStatus parameter
Full Changelog: v2.10.2...v2.10.3

Date: 2024-07-04

@remix-run/react - Forward ref to Form (bdd04217)
@remix-run/server-runtime - Fix bug with immutable headers on raw native fetch responses returned from loaders (#9693)
Full Changelog: v2.10.1...v2.10.2

Date: 2024-07-03

@remix-run/react - Fog of War (unstable): Support route discovery from <Form> components (#9665)
@remix-run/react - Fog of War (unstable): Don't discover links/forms with reloadDocument (#9686)
Full Changelog: v2.10.0...v2.10.1

Date: 2024-06-25

The "Fog of War" feature in Remix, now available through the future.unstable_fogOfWar flag, is an optimization to reduce the up front size of the Remix route manifest. In most scenarios the Remix route manifest isn't prohibitively large so as to impact initial perf metrics, but at scale we've found that some apps can generate large manifests that are expensive to download and execute on app startup.

When Fog of War is enabled, Remix will only include the initially server-rendered routes in the manifest and then it will fetch manifest "patches" for outgoing links as the user navigates around. By default, to avoid waterfalls Remix fetches patches for all rendered links, so that in the ideal case they've already been patched in prior to being clicked. If a user clicks a link before this eager discovery completes, then a small waterfall will occur to first "discover" the route, and then navigate to the route.

Enabling this flag should require no application code changes. For more information, please see the documentation.

Add support for Lazy Route Discovery (a.k.a. Fog of War) (#9600, #9619)
@remix-run/{dev|express|serve} - Upgrade express dependency to ^4.19.2 (#9184)
@remix-run/react - Don't prefetch server loader data when clientLoader exists (#9580)
@remix-run/react - Avoid hydration loops when Layout/ErrorBoundary renders also throw (#9566)
@remix-run/react - Fix a hydration bug when using child routes and HydrateFallback components with a basename (#9584)
@remix-run/{server-runtime|react} - Single Fetch: Update to turbo-stream@2.2.0 (#9562)
@remix-run/server-runtime - Single Fetch: Properly handle thrown 4xx/5xx response stubs (#9501)
@remix-run/server-runtime - Single Fetch: Change redirects to use a 202 status to avoid automatic caching (#9564)
@remix-run/server-runtime - Single Fetch: Fix issues with returning or throwing a response stub from a resource route in single fetch (#9488)
@remix-run/server-runtime - Single Fetch: Fix error when returning null from a resource route (#9488)
Full Changelog: v2.9.2...v2.10.0

Date: 2024-05-10

In 2.9.2 we've enhanced the type-safety when opting into the future.unstable_singleFetch feature. Previously, we added the response stub to LoaderFunctionArgs and used type overrides for inference on useLoaderData, etc., but we found that it wasn't quite enough.

With this release we're introducing new functions to assist the type-inference when using single fetch - defineLoader/defineAction and their client-side counterparts defineClientLoader and nd defineClientAction. These are identity functions; they don't modify your loader or action at runtime. Rather, they exist solely for type-safety by providing types for args and by ensuring valid return types.

export const loader = defineLoader(({ request }) => {
  //                                ^? Request
  return { a: 1, b: () => 2 };
  //           ^ type error: `b` is not serializable
});
 
Note that defineLoader and defineAction are not technically necessary for defining loaders and actions if you aren't concerned with type-safety:

// this totally works! and typechecking is happy too!
export const loader = () => {
  return { a: 1 };
};
 
This means that you can opt-in to defineLoader incrementally, one loader at a time.

Please see the Single Fetch docs for more information.

@remix-run/dev - Vite: Fix dest already exists error when running remix vite:build (#9305)
@remix-run/dev - Vite: Fix issue resolving critical CSS during development when route files are located outside of the app directory (#9194)
@remix-run/dev - Vite: Remove @remix-run/node from Vite plugin's optimizeDeps.include list since it was unnecessary and resulted in Vite warnings when not depending on this package (#9287)
@remix-run/dev - Vite: Clean up redundant ?client-route=1 imports in development (#9395)
@remix-run/dev - Vite: Ensure Babel config files are not referenced when applying the react-refresh Babel transform within the Remix Vite plugin (#9241)
@remix-run/react - Type-safety for single-fetch: defineLoader, defineClientLoader, defineAction, defineClientAction (#9372)
@remix-run/react - Single Fetch: Add undefined to useActionData type override (#9322)
@remix-run/react - Single Fetch: Allow a nonce to be set on single fetch stream transfer inline scripts via <RemixServer> (#9364)
@remix-run/server-runtime - Single Fetch: Don't log thrown response stubs via handleError (#9369)
@remix-run/server-runtime - Single Fetch: Automatically wrap resource route naked object returns in json() for back-compat in v2 (and log deprecation warning) (#9349)
@remix-run/server-runtime - Single Fetch: Pass response stub to resource route handlers (#9349)
Full Changelog: v2.9.1...v2.9.2

Date: 2024-04-24

@remix-run/dev - Fix issue where consumers who had added Remix packages to Vite's ssr.noExternal option were being overridden by the Remix Vite plugin adding Remix packages to Vite's ssr.external option (#9301)
@remix-run/react - Ignore future/*.d.ts files from TS build (#9299)
@remix-run/dev
@remix-run/react
Full Changelog: v2.9.0...v2.9.1

Date: 2024-04-23

2.9.0 introduces a future.unstable_singleFetch flag to enable to Single Fetch behavior (RFC) in your Remix application. Please refer to the docs for the full detail but the high-level changes to be aware of include:

Naked objects returned from loader/action functions are no longer automatically serialized to JSON responses
Instead, they'll be streamed as-is via turbo-stream which allows direct serialization of more complex types such as Promise, Date, Map instances, and more
You will need to modify your tsconfig.json's compilerOptions.types array to infer types properly when using Single Fetch
The headers export is no longer used when Single Fetch is enabled in favor of a new response stub passed to your loader/action functions
The json/defer/redirect utilities are deprecated when using Single Fetch (but still work mostly the same)
Actions no longer automatically revalidate on 4xx/5xx responses - you can return a 2xx to opt-into revalidation or use shouldRevalidate
Important

Single Fetch requires using undici as your fetch polyfill, or using the built-in fetch on Node 20+, because it relies on APIs available there but not in the @remix-run/web-fetch polyfill. Please refer to the Undici section below for more details.

If you are managing your own server and calling installGlobals(), you will need to call installGlobals({ nativeFetch: true }) to avoid runtime errors when using Single Fetch
If you are using remix-serve, it will use undici automatically if Single Fetch is enabled
Remix 2.9.0 adds a new installGlobals({ nativeFetch: true }) flag to opt into using undici for the Web Fetch polyfills instead of the @remix-run/web-* packages. This change has a few primary benefits:

It will allow us to stop maintaining our own web-std-io fork in future versions of Remix
It should bring us more in-line with spec compliance
⚠️ It is possible that some non-spec-compliant bugs in our fork will be "fixed" by moving to undici, so beware of "breaking bug fixes" and keep an eye on any advanced fetch API interactions you're performing in your app
⚠️ In some cases, undici may have different behavior by design -- most notably, undici's garbage collection behavior differs and you are required to consume all fetch response bodies to avoid a memory leak in your app
Because undici is the fetch implementation used by node internally, it should better prepare Remix apps to more smoothly drop the polyfill to use the built-in Node.js APIs on node 20+
New future.unstable_singleFetch flag (#8773, #9073, #9084, #9272)
@remix-run/node - Add a new installGlobals({ nativeFetch: true }) flag to opt-into using undici as the fetch polyfill instead of @remix-run/web-* (#9106, #9111, #9198)
@remix-run/server-runtime - Add ResponseStub header interface and deprecate the headers export when Single Fetch is enabled (#9142)
create-remix - Allow . in repo name when using --template flag (#9026)
@remix-run/dev - Improve getDependenciesToBundle resolution in monorepos (#8848)
@remix-run/dev - Fix SPA mode when Single Fetch is enabled by using streaming entry.server (#9063)
@remix-run/dev - Vite: added sourcemap support for transformed routes (#8970)
@remix-run/dev - Update links printed to the console by the Remix CLI/Dev Server to point to updated docs locations (#9176)
@remix-run/server-runtime - Handle redirects created by handleDataRequest (#9104)
Full Changelog: v2.8.1...v2.9.0
